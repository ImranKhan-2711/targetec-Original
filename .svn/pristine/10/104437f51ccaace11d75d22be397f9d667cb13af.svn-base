package com.tec.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import javax.inject.Inject;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.ParameterizedRowMapper;
import org.springframework.stereotype.Repository;

import com.tec.dao.NeuroGenericDAO;
import com.tec.dao.QuestionMasterDao;
import com.tec.model.QuestionMaster;
import com.tec.model.StyleMaster;
import com.tec.model.TypeMaster;
import com.tec.template.Page;
import com.tec.template.PaginationHelper;

@Repository("questionMasterDao")
public class QuestionMasterDaoImpl extends NeuroGenericDAO implements QuestionMasterDao {

	public QuestionMasterDaoImpl() {

	}

	@Inject
	public QuestionMasterDaoImpl(JdbcTemplate jdbcTemplate) {
		super(jdbcTemplate);
	}

	public Long insert(QuestionMaster questionMaster) {
		String insertSQL = "INSERT INTO question_master (type_id,style_id,description,directions,question_text,media_resource,min_words,max_words,duration,status) VALUES (?,?,?,?,?,?,?,?,?,?)";
		jdbcTemplate.update(insertSQL,
				new Object[] { questionMaster.getTypeMaster().getId(), questionMaster.getStyleMaster().getId(),
						questionMaster.getDescription(), questionMaster.getDirection(),
						questionMaster.getQuestionText(), 10000006, questionMaster.getMinWords(),
						questionMaster.getMaxWords(), questionMaster.getDuration(), "ACTIVE" });
		return jdbcTemplate.queryForLong("select max(id) from question_master");
	}

	public QuestionMaster findByQuestionMasterId(Long id) {
		PaginationHelper<QuestionMaster> ph = new PaginationHelper<QuestionMaster>();
		Page<QuestionMaster> page = new Page<QuestionMaster>("");
		String selSQL = "SELECT qm.id id, tm.id type_id,tm.name type_name, sm.id style_id,sm.name style_name, qm.description, qm.directions, qm.question_text, qm.min_words, qm.max_words, qm.duration, qm.status FROM question_master qm,type_master tm,style_master sm WHERE qm.type_id =tm.id and qm.style_id = sm.id  ";

		if (id != null && !id.equals("")) {
			selSQL += " and qm.id like '%" + id + "%'";
		}
		String countSQL = "select count(*) from (" + selSQL + ") c";
		return ph.fetchPage(jdbcTemplate, countSQL, selSQL, new String[] {}, page, new QuestionMasterMapper())
				.getPageItems().get(0);
	}

	public Page<QuestionMaster> findQuestions(Page<QuestionMaster> page, Long typeId) {
		PaginationHelper<QuestionMaster> ph = new PaginationHelper<QuestionMaster>();

		String selSQL = " SELECT qm.id id, tm.id type_id,tm.name type_name, sm.id style_id,sm.name style_name, qm.description, qm.directions, qm.question_text, qm.min_words, qm.max_words, qm.duration, qm.status FROM question_master qm,type_master tm,style_master sm WHERE qm.type_id =tm.id and qm.style_id = sm.id AND tm.id='"
				+ typeId + "'";

		String countSQL = "select count(*) from (" + selSQL + ") c";
		return ph.fetchPage(jdbcTemplate, countSQL, selSQL, new String[] {}, page, new QuestionMasterMapper());
	}

	private static final class QuestionMasterMapper implements ParameterizedRowMapper<QuestionMaster> {

		public QuestionMaster mapRow(ResultSet rs, int rowNum) throws SQLException {

			return new QuestionMaster(rs.getLong(1), new TypeMaster(rs.getLong(2), rs.getString(3), null, null),
					new StyleMaster(rs.getLong(4), rs.getString(5), null, null), null, rs.getString(6), rs.getString(7),
					rs.getString(8), rs.getInt(9), rs.getInt(10), rs.getTime(11), rs.getString(12));
		}
	}

}
